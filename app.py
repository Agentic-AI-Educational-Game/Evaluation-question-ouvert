# app.py
import streamlit as st
import json
import os
import pandas as pd # Pour st.dataframe

# Importer la fonction de workflow modifi√©e
try:
    from workflow import run_evaluation_workflow
except ImportError:
    st.error("√âchec de l'importation de workflow.py. Assurez-vous qu'il se trouve dans le m√™me r√©pertoire ou accessible dans PYTHONPATH.")
    st.stop()


# --- Configuration de la Page ---
st.set_page_config(page_title="Workflow de Notation Automatis√©e", layout="wide")

st.title("üìù Workflow de Notation Automatis√©e")
st.markdown("""
Cette application d√©montre un workflow assist√© par IA pour noter automatiquement les r√©ponses des √©l√®ves.
Entrez le texte de contexte, la question et la r√©ponse de l'√©l√®ve ci-dessous, puis cliquez sur "√âvaluer la R√©ponse".
Vous pouvez superviser chaque √©tape du processus d'√©valuation dans les sections d√©roulantes qui apparaissent.
""")

# --- V√©rification de la Cl√© API ---
if not os.environ.get("GROQ_API_KEY"):
    st.error("üö® Variable d'environnement GROQ_API_KEY non d√©finie ! Veuillez la d√©finir avant de lancer l'application.")
    st.info("Vous pouvez la d√©finir dans votre terminal, par ex., `export GROQ_API_KEY='votre_cl√©_api'` ou dans un fichier `.env` si vous utilisez un outil comme python-dotenv (non impl√©ment√© ici).")
    st.stop()
else:
    st.sidebar.success("GROQ_API_KEY trouv√©e !")

# --- Textes par D√©faut (d√©j√† en fran√ßais) ---
DEFAULT_TEXT = """
Dans la cour de l'√©cole, les √©l√®ves sont joyeux. Ils jouent en groupes. Certains font de la
corde √† sauter. D'autres jouent √† cache-cache. On entend des rires partout.
En classe, la ma√Ætresse explique la le√ßon de math√©matiques avec un grand sourire. Elle
√©crit des chiffres au tableau. Les enfants l'√©coutent avec attention.
Nous prenons nos livres et nos cahiers. Il est temps d'apprendre √† faire des additions
et √† r√©soudre des probl√®mes. La ma√Ætresse nous montre comment faire. Chacun essaie
sur son cahier. Si on a du mal, on peut demander de l'aide. Petit √† petit, on devient plus
fort en maths.
"""
DEFAULT_QUESTION = "Que fait la ma√Ætresse ?"
DEFAULT_STUDENT_ANSWER = "La maitresse explique la lecon de mathematiques et elle ecrit au tableau"

# --- Champs de Saisie ---
st.header("üìã Entr√©es")
col1, col2 = st.columns(2)
with col1:
    text_input = st.text_area("üìö Texte de Contexte", value=DEFAULT_TEXT, height=250)
with col2:
    question_input = st.text_area("‚ùì Question", value=DEFAULT_QUESTION, height=100)
student_answer_input = st.text_area("‚úçÔ∏è R√©ponse de l'√âl√®ve", value=DEFAULT_STUDENT_ANSWER, height=100)

# --- √âtat de Session ---
if 'workflow_steps' not in st.session_state:
    st.session_state.workflow_steps = None
if 'final_evaluation_result' not in st.session_state:
    st.session_state.final_evaluation_result = None
if 'evaluation_triggered' not in st.session_state:
    st.session_state.evaluation_triggered = False

# --- Fonction d'aide pour afficher joliment le JSON analys√© ---
def display_parsed_output(data, step_name):
    """Affiche les donn√©es JSON analys√©es en utilisant les composants Streamlit appropri√©s."""
    if not isinstance(data, dict):
        st.json(data) # Solution de repli pour les donn√©es non-dict
        return

    # --- Logique d'affichage sp√©cifique par agent/√©tape ---
    if "Question Understanding" in step_name or "Compr√©hension des Questions" in step_name:
        st.write(f"**Type de Question :** {data.get('question_type', 'N/A')}")
        st.write("**Concepts Cl√©s Attendus :**")
        if data.get('key_concepts_expected'):
            for concept in data['key_concepts_expected']:
                st.markdown(f"- {concept}")
        else:
            st.write("N/A")
        st.write("**Attentes de l'Enseignant :**")
        if data.get('teacher_expectations'):
            for expectation in data['teacher_expectations']:
                st.markdown(f"- {expectation}")
        else:
            st.write("N/A")

    elif "Rubric Extraction" in step_name or "Extraction de Rubriques" in step_name:
        if data.get('rubric') and isinstance(data['rubric'], list):
            st.write("**Grille d'√âvaluation (Rubrique) :**")
            if data['rubric']:
                df = pd.DataFrame(data['rubric'])
                st.dataframe(df, use_container_width=True)
            else:
                st.info("La liste de la rubrique est vide.")
        else:
            st.write("Donn√©es de la rubrique non trouv√©es ou format de liste inattendu.")
            st.json(data)


    elif "Answer Understanding" in step_name or "Compr√©hension des R√©ponses" in step_name:
        st.write("**Concepts Trouv√©s :**")
        if data.get('concepts_found'):
            for concept in data['concepts_found']:
                st.markdown(f"- {concept}")
        else:
            st.write("N/A")
        
        st.write("**Entit√©s Nomm√©es :**")
        if data.get('named_entities'):
            for entity in data['named_entities']:
                st.markdown(f"- {entity}")
        else:
            st.write("N/A")

        st.write("**Dates Mentionn√©es :**")
        if data.get('dates'):
            for date_ref in data['dates']:
                st.markdown(f"- {date_ref}")
        else:
            st.write("N/A")

        if 'structure' in data and isinstance(data['structure'], dict):
            st.write("**Structure de la R√©ponse :**")
            structure = data['structure']
            st.write(f"- Coh√©rente : {structure.get('coherent', 'N/A')}")
            st.write(f"- A une Introduction : {structure.get('has_intro', 'N/A')}")
            st.write(f"- A un Corps : {structure.get('has_body', 'N/A')}")
            st.write(f"- A une Conclusion : {structure.get('has_conclusion', 'N/A')}")
        else:
            st.write("Donn√©es de structure non trouv√©es ou format de dictionnaire inattendu.")


    elif "Grammar and Language" in step_name or "Grammaire et Langue" in step_name:
        score_col, penalty_col = st.columns(2)
        with score_col:
            st.metric("Score de Grammaire (0-100)", value=data.get('grammar_score', 'N/A'))
        with penalty_col:
            st.metric("P√©nalit√© Linguistique (%)", value=data.get('penalty', 'N/A'))
        
        if data.get('errors') and isinstance(data['errors'], list):
            st.write("**Erreurs Identifi√©es :**")
            if data['errors']:
                errors_df = pd.DataFrame(data['errors'])
                st.dataframe(errors_df, use_container_width=True)
            else:
                st.info("Aucune erreur grammaticale identifi√©e.")
        else:
            st.write("Donn√©es d'erreurs non trouv√©es ou format de liste inattendu.")
            st.json(data)


    elif "Evaluation Agent" in step_name or "√âvaluation" == step_name:
        if 'total_score' in data:
            st.metric("Score Bas√© sur la Rubrique", value=data.get('total_score', 'N/A'))
        
        if data.get('scores') and isinstance(data['scores'], list):
            st.write("**Scores D√©taill√©s :**")
            if data['scores']:
                scores_df = pd.DataFrame(data['scores'])
                st.dataframe(scores_df, use_container_width=True)
            else:
                st.info("La liste des scores d√©taill√©s est vide.")
        else:
            st.write("Donn√©es des scores d√©taill√©s non trouv√©es ou format de liste inattendu.")
            st.json(data)


    elif "Final Scoring" in step_name or "Notation Finale" in step_name:
        if 'final_score' in data:
            st.metric("Score Final (sur 100)", value=data.get('final_score', 'N/A'))
        if 'feedback' in data:
            st.write("**Feedback pour l'√âl√®ve :**")
            st.info(data['feedback'])
        else:
            st.json(data)


    else: # Solution de repli pour toute autre √©tape ou donn√©e inattendue
        st.json(data)

# --- Bouton d'√âvaluation ---
if st.button("üöÄ √âvaluer la R√©ponse", type="primary"):
    if not text_input or not question_input or not student_answer_input:
        st.warning("Veuillez remplir tous les champs de saisie.")
    else:
        st.session_state.evaluation_triggered = True
        st.session_state.workflow_steps = None 
        st.session_state.final_evaluation_result = None

        with st.spinner("üß† √âvaluation en cours... Cela peut prendre un moment car les LLMs sont appel√©s..."):
            final_result, steps_data = run_evaluation_workflow(
                text_input, question_input, student_answer_input
            )
            st.session_state.workflow_steps = steps_data
            st.session_state.final_evaluation_result = final_result

# --- Affichage des R√©sultats ---
if st.session_state.evaluation_triggered:
    st.header("üîç Supervision du Workflow & R√©sultats")

    if st.session_state.workflow_steps:
        for i, step in enumerate(st.session_state.workflow_steps):
            # Traduire les noms d'√©tapes s'ils viennent de workflow.py en anglais
            step_name_display = step['name']
            if "Question Understanding" in step_name_display: step_name_display = step_name_display.replace("Question Understanding", "Compr√©hension des Questions")
            if "Rubric Extraction" in step_name_display: step_name_display = step_name_display.replace("Rubric Extraction", "Extraction de Rubriques")
            if "Answer Understanding" in step_name_display: step_name_display = step_name_display.replace("Answer Understanding", "Compr√©hension des R√©ponses")
            if "Grammar and Language" in step_name_display: step_name_display = step_name_display.replace("Grammar and Language", "Grammaire et Langue")
            if "Evaluation Agent" in step_name_display: step_name_display = step_name_display.replace("Evaluation Agent", "Agent d'√âvaluation")
            if "Final Scoring" in step_name_display: step_name_display = step_name_display.replace("Final Scoring", "Notation Finale")
            if "Logic Check" in step_name_display: step_name_display = step_name_display.replace("Logic Check", "V√©rification Logique")

            status_display = "Succ√®s" if step['status'] == "Success" else "√âchec"
            expander_title = f"√âtape {i+1}: {step_name_display} - Statut: {status_display}"
            
            is_last_successful_step = (i == len(st.session_state.workflow_steps) - 1) and step['status'] == "Success"
            expanded_default = (step['status'] == "Failure") or is_last_successful_step

            with st.expander(expander_title, expanded=expanded_default):
                st.subheader("Logs des Tentatives :")
                if step.get('attempts_logs'):
                    for log_entry in step['attempts_logs']:
                        st.text(log_entry)
                else:
                    st.write("Aucun log de tentative.")
                
                if step.get('parsed_output'):
                    st.subheader("Sortie Analys√©e :")
                    display_parsed_output(step['parsed_output'], step['name']) # step['name'] original pour la logique interne
                
                if step['status'] == "Failure" and step.get('error_message_detail'):
                    st.error(f"D√©tail de l'Erreur : {step['error_message_detail']}")
        
        st.divider()

    if st.session_state.final_evaluation_result:
        st.subheader("üèÜ R√©sultat Final de l'√âvaluation")
        # Utiliser display_parsed_output pour le r√©sultat final √©galement
        if st.session_state.workflow_steps and ("Final Scoring" in st.session_state.workflow_steps[-1]['name'] or "Notation Finale" in st.session_state.workflow_steps[-1]['name']):
             display_parsed_output(st.session_state.final_evaluation_result, "Notation Finale") # Utiliser un nom coh√©rent
        else:
            st.json(st.session_state.final_evaluation_result) 

        st.success("üéâ Workflow termin√© avec succ√®s !")
        # st.balloons() # Effet de succ√®s supprim√©

    elif st.session_state.workflow_steps: 
        st.error("‚ùå L'ex√©cution du workflow a √©chou√©. Veuillez examiner les √©tapes ci-dessus pour plus de d√©tails.")